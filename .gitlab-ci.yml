# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  GIT_STRATEGY: clone

    #    GIT_SUBMODULE_STRATEGY: recursive

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
  - release

before_script:
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.slant.tech/".insteadof "git@gitlab.slant.tech:"
  - git submodule sync && git submodule update --init

build-linux:       # This job runs in the build stage, which runs first.
  image: gitlab.slant.tech:5050/docker-images/popin_build
  stage: build
  script:
    - echo "Compiling the code..."
    - make clean
    - make clean-lib
    - make all
    - echo "Compile complete."
  artifacts:
    name: "linux-amd64-bin"
    paths:
      - ./pop

build-windows:       # This job runs in the build stage, which runs first.
  image: gitlab.slant.tech:5050/docker-images/popin_build
  stage: build
  script:
    - echo "Compiling the code..."
    - make clean
    - make clean-lib
    - make OS=Windows release
    - echo "Compile complete."
  artifacts:
    name: "windows-bin"
    paths:
      - release/

sast:
  stage: test
  artifacts:

  rules:
    - when: never
  variables:
    SEARCH_MAX_DEPTH: 4
  script:
    - echo "$CI_JOB_NAME is used for configuration only, and its script should not be executed"
    - exit 1

.sast-analyzer:
  extends: sast
  allow_failure: true
  script:
    - echo "$SAST_ANALYZER_IMAGE"
    - /analyzer run

flawfinder-sast:   # This job runs in the test stage.
  extends: sast
  artifacts:
      reports:
        sast: 
          - src-sast-report.json
          #- all-sast-report.json

  image: alpine:latest
  script:
    - apk add git flawfinder
    - flawfinder --sarif ./src > src-sast-report.json
    #- flawfinder --sarif ./ > all-sast-report.json
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $SAST_EXCLUDED_ANALYZERS =~ /flawfinder/
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.c'
        - '**/*.cpp'

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Not yet implemented"

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Not yet implemented"



