# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

include:
  - template: SAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

variables:
  GIT_STRATEGY: clone
  SAST_IMAGE_SUFFIX: '-fips'

    #    GIT_SUBMODULE_STRATEGY: recursive

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
  - release

build-linux:       # This job runs in the build stage, which runs first
  tags:
    - docker
  image: gitlab.slant.tech:5050/docker-images/popin_build
  stage: build
  before_script:
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.slant.tech/".insteadof "git@gitlab.slant.tech:"
    - git submodule sync && git submodule update --init
  script:
    - echo "Compiling the code..."
    - make clean
    - make clean-lib
    - make all
    - echo "Compile complete."
  artifacts:
    name: "linux-amd64-bin"
    paths:
      - ./pop

build-windows:       # This job runs in the build stage, which runs first.
  tags:
    - docker
  image: gitlab.slant.tech:5050/docker-images/popin_build
  stage: build
  before_script:
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.slant.tech/".insteadof "git@gitlab.slant.tech:"
    - git submodule sync && git submodule update --init
  script:
    - echo "Compiling the code..."
    - make clean
    - make clean-lib
    - make OS=Windows release
    - echo "Compile complete."
    - echo "Archiving release folder"
    - zip release.zip release
  artifacts:
    name: "windows-bin"
    paths:
      - release.zip

code_quality:
  image: docker:20.10.16
  rules:
    - if: $CODE_QUALITY_DISABLED
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
  - docker:20.10.16-dind
  tags:
    - docker-priv
  artifacts:
    paths: [gl-code-quality-report.json]

code_quality_html:
  extends: code_quality
  variables:
    REPORT_FORMAT: html
  artifacts:
    paths: [gl-code-quality-report.html]

#lint-test-job:   # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Not yet implemented"


deploy-dev:      # This job runs in the deploy stage.
  image: python:latest
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  dependencies:
    - "build-linux"
    - "build-windows"
  before_script:
    - pip install awscli # Install the SDK
    - aws configure set default.endpoint https://${BUCKET_ENDPOINT}
    - aws configure set default.region fr-par
  script:
    - aws s3api put-object --bucket ${BUCKET_ID} --key dev/${CI_COMMIT_REF_SLUG}/windows-bin.zip --body release.zip  --endpoint-url https://${BUCKET_ENDPOINT}
    - aws s3api put-object --bucket ${BUCKET_ID} --key dev/${CI_COMMIT_REF_SLUG}/linux-bin --body pop --endpoint-url https://${BUCKET_ENDPOINT}
 
  environment:
    name: development
    url: https://${BUCKET_ID}.${BUCKET_ENDPOINT}/dev/${CI_COMMIT_REF_SLUG}

deploy-staging:      # This job runs in the deploy stage.
  image: python:latest
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  dependencies:
    - "build-linux"
    - "build-windows"
  before_script:
    - pip install awscli # Install the SDK
    - aws configure set default.endpoint https://${BUCKET_ENDPOINT}
    - aws configure set default.region fr-par
  script:
    - aws s3api put-object --bucket ${BUCKET_ID} --key staging/${CI_COMMIT_REF_SLUG}/windows-bin.zip --body release.zip  --endpoint-url https://${BUCKET_ENDPOINT}
    - aws s3api put-object --bucket ${BUCKET_ID} --key staging/${CI_COMMIT_REF_SLUG}/linux-bin --body pop --endpoint-url https://${BUCKET_ENDPOINT}
 
  environment:
    name: staging
    url: https://${BUCKET_ID}.${BUCKET_ENDPOINT}/staging/${CI_COMMIT_REF_SLUG}


deploy-release:      # This job runs in the deploy stage.
  image: python:latest
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  rules:
    - if: $CI_COMMIT_TAG
  dependencies:
    - "build-linux"
    - "build-windows"
  before_script:
    - pip install awscli # Install the SDK
    - aws configure set default.endpoint https://${BUCKET_ENDPOINT}
    - aws configure set default.region fr-par
  script:
    - aws s3api put-object --bucket ${BUCKET_ID} --key release/${CI_COMMIT_REF_SLUG}/windows-bin.zip --body release.zip --endpoint-url https://${BUCKET_ENDPOINT}
    - aws s3api put-object --bucket ${BUCKET_ID} --key release/${CI_COMMIT_REF_SLUG}/linux-bin --body pop --endpoint-url https://${BUCKET_ENDPOINT}
  environment:
    name: production
    url: https://${BUCKET_ID}.${BUCKET_ENDPOINT}/releases/${CI_COMMIT_TAG}
  release:                               # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'


